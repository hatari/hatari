Hatari CPU profile (Hatari v2.6.1)
Cycles/second:	8021247
Field names:	Executed instructions, Used cycles, Instruction cache misses, Data cache hits
Field regexp:	^\$?([0-9A-Fa-f]+) .*% \(([^)]*)\)$
ST_RAM:		0x000000-0x100000
ROM_TOS:	0xe00000-0xe00124
CARTRIDGE:	0xfa0000-0xfc0000
# disassembly with profile data: <instructions percentage>% (<sum of instructions>, <sum of cycles>, <sum of i-cache misses>, <sum of d-cache hits>)
$00001100             clr.w     -(a7)                      0.00% (1, 16, 0, 0)
$00001102             pea.l     $15da.l                    0.00% (1, 20, 0, 0)
$00001108             move.w    #$3c,-(a7)                 0.00% (1, 12, 0, 0)
$0000110c             trap      #$1                        0.00% (1, 36, 0, 0)
$0000110e             addq.l    #$8,a7                     0.00% (1, 8, 0, 0)
$00001110             move.w    d0,$1608.l                 0.00% (1, 16, 0, 0)
$00001116             lea.l     $12ca.l,a4                 0.00% (1, 12, 0, 0)
main_loop:
$0000111c             move.l    (a4)+,-(a7)                0.00% (16, 320, 0, 0)
$0000111e             bsr.w     $115a                      0.00% (16, 320, 0, 0)
$00001122             addq.l    #$4,a7                     0.00% (16, 128, 0, 0)
$00001124             pea.l     $15e6.l                    0.00% (16, 320, 0, 0)
$0000112a             bsr.w     $115a                      0.00% (16, 320, 0, 0)
$0000112e             addq.l    #$4,a7                     0.00% (16, 128, 0, 0)
$00001130             move.l    (a4)+,-(a7)                0.00% (16, 320, 0, 0)
$00001132             bsr.w     $135a                      0.00% (16, 320, 0, 0)
$00001136             addq.l    #$4,a7                     0.00% (16, 128, 0, 0)
$00001138             pea.l     $15ea.l                    0.00% (16, 320, 0, 0)
$0000113e             bsr.w     $115a                      0.00% (16, 320, 0, 0)
$00001142             addq.l    #$4,a7                     0.00% (16, 128, 0, 0)
$00001144             tst.l     (a4)                       0.00% (16, 192, 0, 0)
$00001146             bne.b     $111c                      0.00% (16, 188, 0, 0)
$00001148             move.w    $1608.l,-(a7)              0.00% (1, 20, 0, 0)
$0000114e             move.w    #$3e,-(a7)                 0.00% (1, 12, 0, 0)
$00001152             trap      #$1                        0.00% (1, 36, 0, 0)
$00001154             addq.l    #$4,a7                     0.00% (1, 8, 0, 0)
$00001156             clr.w     -(a7)                      0.00% (1, 16, 0, 0)
[...]
print:
$0000115a             move.l    $4(a7),-(a7)               0.01% (48, 1152, 0, 0)
$0000115e             move.w    #$9,-(a7)                  0.01% (48, 576, 0, 0)
$00001162             trap      #$1                        0.01% (48, 1728, 0, 0)
$00001164             addq.l    #$6,a7                     0.01% (48, 384, 0, 0)
$00001166             moveq     #$ff,d0                    0.01% (48, 192, 0, 0)
$00001168             movea.l   $4(a7),a0                  0.01% (48, 768, 0, 0)
strlenloop:
$0000116c             addq.l    #$1,d0                     0.09% (485, 3880, 0, 0)
$0000116e             tst.b     (a0)+                      0.09% (485, 3880, 0, 0)
$00001170             bne.b     $116c                      0.09% (485, 5628, 0, 0)
$00001172             move.l    $4(a7),-(a7)               0.01% (48, 1152, 0, 0)
$00001176             move.l    d0,-(a7)                   0.01% (48, 576, 0, 0)
$00001178             move.w    $1608.l,-(a7)              0.01% (48, 960, 0, 0)
$0000117e             move.w    #$40,-(a7)                 0.01% (48, 576, 0, 0)
$00001182             trap      #$1                        0.01% (48, 1728, 0, 0)
$00001184             lea.l     $c(a7),a7                  0.01% (48, 384, 0, 0)
out:
$00001188             rts                                  0.01% (50, 800, 0, 0)
[...]
test_nop:
$00001192             nop                                  0.00% (1, 4, 0, 0)
$00001194             rts                                  0.00% (1, 16, 0, 0)
[...]
test_2nop:
$000011a0             nop                                  0.00% (1, 4, 0, 0)
$000011a2             nop                                  0.00% (1, 4, 0, 0)
$000011a4             rts                                  0.00% (1, 16, 0, 0)
[...]
test_lsl1:
$000011ae             moveq     #$0,d0                     0.00% (1, 4, 0, 0)
$000011b0             lsl.l     d0,d1                      0.00% (1, 8, 0, 0)
$000011b2             rts                                  0.00% (1, 16, 0, 0)
[...]
test_lsl2:
$000011bc             moveq     #$6,d0                     0.00% (1, 4, 0, 0)
$000011be             lsl.l     d0,d1                      0.00% (1, 20, 0, 0)
$000011c0             rts                                  0.00% (1, 16, 0, 0)
[...]
test_exg_dbra1:
$000011d0             moveq     #$0,d2                     0.00% (1, 4, 0, 0)
$000011d2             nop                                  0.00% (1, 4, 0, 0)
$000011d4             exg.l     d0,d1                      0.00% (1, 6, 0, 0)
$000011d6             dbra      d2,$1188                   0.00% (1, 14, 0, 0)
$000011da             rts                                  0.00% (1, 16, 0, 0)
[...]
test_exg_dbra2:
$000011ea             moveq     #$0,d2                     0.00% (1, 4, 0, 0)
$000011ec             exg.l     d0,d1                      0.00% (1, 6, 0, 0)
$000011ee             nop                                  0.00% (1, 6, 0, 0)
$000011f0             dbra      d2,$1188                   0.00% (1, 16, 0, 0)
$000011f4             rts                                  0.00% (1, 16, 0, 0)
[...]
test_exg_move1:
$00001204             nop                                  0.00% (1, 4, 0, 0)
$00001206             exg.l     d0,d1                      0.00% (1, 6, 0, 0)
$00001208             move.b    -(a0),d1                   0.00% (1, 10, 0, 0)
$0000120a             rts                                  0.00% (1, 16, 0, 0)
[...]
test_exg_move2:
$0000121a             exg.l     d0,d1                      0.00% (1, 6, 0, 0)
$0000121c             nop                                  0.00% (1, 6, 0, 0)
$0000121e             move.b    -(a0),d1                   0.00% (1, 12, 0, 0)
$00001220             rts                                  0.00% (1, 16, 0, 0)
[...]
test_asr_add1:
$0000122e             moveq     #$2,d0                     0.00% (1, 4, 0, 0)
$00001230             nop                                  0.00% (1, 4, 0, 0)
$00001232             asr.w     d0,d1                      0.00% (1, 10, 0, 0)
$00001234             add.w     -(a0),d1                   0.00% (1, 10, 0, 0)
$00001236             rts                                  0.00% (1, 16, 0, 0)
[...]
test_asr_add2:
$00001244             moveq     #$2,d0                     0.00% (1, 4, 0, 0)
$00001246             asr.w     d0,d1                      0.00% (1, 10, 0, 0)
$00001248             nop                                  0.00% (1, 6, 0, 0)
$0000124a             add.w     -(a0),d1                   0.00% (1, 12, 0, 0)
$0000124c             rts                                  0.00% (1, 16, 0, 0)
[...]
test_cmp_beq1:
$0000125a             nop                                  0.00% (1, 4, 0, 0)
$0000125c             cmp.l     d0,d0                      0.00% (1, 6, 0, 0)
$0000125e             bra.w     $1188                      0.00% (1, 10, 0, 0)
[...]
test_cmp_beq2:
$0000126e             cmp.l     d0,d0                      0.00% (1, 6, 0, 0)
$00001270             nop                                  0.00% (1, 6, 0, 0)
$00001272             bra.w     $1188                      0.00% (1, 12, 0, 0)
[...]
test_sub_move1:
$00001284             clr.w     d2                         0.00% (1, 4, 0, 0)
$00001286             sub.l     (a0),d0                    0.00% (1, 14, 0, 0)
$00001288             move.w    (a0,d2.w),d1               0.00% (1, 14, 0, 0)
$0000128c             rts                                  0.00% (1, 16, 0, 0)
[...]
test_sub_move2:
$0000129c             sub.l     (a0),d0                    0.00% (1, 14, 0, 0)
$0000129e             clr.w     d2                         0.00% (1, 6, 0, 0)
$000012a0             move.w    (a0,d2.w),d1               0.00% (1, 16, 0, 0)
$000012a4             rts                                  0.00% (1, 16, 0, 0)
[...]
test_move_820a:
$000012b2             move.b    $820a.w,d0                 0.00% (1, 12, 0, 0)
$000012b6             rts                                  0.00% (1, 16, 0, 0)
[...]
test_move_8800:
$000012c4             move.b    $8800.w,d0                 0.00% (1, 16, 0, 0)
$000012c8             rts                                  0.00% (1, 16, 0, 0)
[...]
testinit:
$00001352             movea.l   #$164a,a0                  0.00% (16, 192, 0, 0)
$00001358             rts                                  0.00% (16, 256, 0, 0)
run_test:
$0000135a             move.l    $4(a7),d0                  0.00% (16, 256, 0, 0)
$0000135e             movem.l   d3-d7/a3-a6,-(a7)          0.00% (16, 1280, 0, 0)
$00001362             movea.l   d0,a5                      0.00% (16, 64, 0, 0)
$00001364             pea.l     $0.l                       0.00% (16, 320, 0, 0)
$0000136a             move.w    #$20,-(a7)                 0.00% (16, 192, 0, 0)
$0000136e             trap      #$1                        0.00% (16, 576, 0, 0)
$00001370             addq.l    #$6,a7                     0.00% (16, 128, 0, 0)
$00001372             move.l    d0,$15fa.l                 0.00% (16, 320, 0, 0)
$00001378             move.l    $10.l,$15fe.l              0.00% (16, 576, 0, 0)
$00001382             move.w    #$765,$8240.w              0.00% (16, 256, 0, 0)
$00001388             move.b    #$2,$820a.w                0.00% (16, 256, 0, 0)
loop:
$0000138e             move.l    $70.l,$1602.l              0.00% (16, 576, 0, 0)
$00001398             move.l    #$15d0,$70.l               0.00% (16, 448, 0, 0)
$000013a2             move.w    #$0,$1606.l                0.00% (16, 320, 0, 0)
$000013aa             stop      #$2300                    89.87% (495658, 1983580, 0, 0)
$000013ae             tst.w     $1606.l                    0.00% (16, 256, 0, 0)
$000013b4             beq.b     $138e                      0.00% (16, 128, 0, 0)
$000013b6             move.l    $1602.l,$70.l              0.00% (16, 576, 0, 0)
$000013c0             move.w    #$2700,sr                  0.00% (16, 256, 0, 0)
$000013c4             jsr       $1352.l                    0.00% (16, 320, 0, 0)
$000013ca             move.l    a0,-(a7)                   0.00% (16, 192, 0, 0)
$000013cc             move.w    d0,-(a7)                   0.00% (16, 128, 0, 0)
$000013ce             lea.l     $8209.w,a0                 0.00% (16, 128, 0, 0)
$000013d2             moveq     #$0,d0                     0.00% (16, 64, 0, 0)
$000013d4             move.b    (a0),d0                    4.65% (25622, 204976, 0, 0)
$000013d6             beq.b     $13d4                      4.65% (25622, 307400, 0, 0)
$000013d8             not.w     d0                         0.00% (16, 64, 0, 0)
$000013da             lsr.w     d0,d0                      0.00% (16, 1940, 0, 0)
$000013dc             move.w    #$80,d0                    0.00% (16, 128, 0, 0)
$000013e0             sub.w     $1586(pc),d0               0.00% (16, 192, 0, 0)
$000013e4             add.w     d0,d0                      0.00% (16, 64, 0, 0)
$000013e6             jmp       $13ea(pc,d0.w)             0.00% (16, 256, 0, 0)
[...]
$000014ea             move.w    (a7)+,d0                   0.00% (16, 128, 0, 0)
$000014ec             movea.l   (a7)+,a0                   0.00% (16, 192, 0, 0)
$000014ee             jsr       (a5)                       0.00% (16, 256, 0, 0)
continue:
$000014f0             move.b    $8209.w,d0                 0.00% (16, 192, 0, 0)
$000014f4             move.b    $8207.w,d1                 0.00% (16, 192, 0, 0)
$000014f8             move.b    $8205.w,d2                 0.00% (16, 192, 0, 0)
$000014fc             move.b    $8209.w,d3                 0.00% (16, 192, 0, 0)
$00001500             sub.b     d0,d3                      0.00% (16, 64, 0, 0)
$00001502             cmp.b     #$12,d3                    0.00% (16, 128, 0, 0)
$00001506             beq.b     $1528                      0.00% (16, 192, 0, 0)
[...]
$00001528             move.w    #$770,$8240.w              0.00% (16, 256, 0, 0)
$0000152e             move.w    #$2300,sr                  0.00% (16, 256, 0, 0)
$00001532             and.l     #$ff,d0                    0.00% (16, 256, 0, 0)
$00001538             and.l     #$ff,d1                    0.00% (16, 256, 0, 0)
$0000153e             and.l     #$ff,d2                    0.00% (16, 256, 0, 0)
$00001544             lsl.w     #$8,d2                     0.00% (16, 352, 0, 0)
$00001546             add.w     d1,d2                      0.00% (16, 96, 0, 0)
$00001548             lsl.l     #$8,d2                     0.00% (16, 384, 0, 0)
$0000154a             add.w     d0,d2                      0.00% (16, 64, 0, 0)
$0000154c             sub.l     $44e.l,d2                  0.00% (16, 352, 0, 0)
$00001552             divu.w    #$a0,d2                    0.00% (16, 2272, 0, 0)
$00001556             move.l    d2,d0                      0.00% (16, 64, 0, 0)
$00001558             mulu.w    #$100,d0                   0.00% (16, 704, 0, 0)
$0000155c             swap      d2                         0.00% (16, 64, 0, 0)
$0000155e             add.w     d2,d0                      0.00% (16, 64, 0, 0)
$00001560             sub.w     $1586(pc),d0               0.00% (16, 192, 0, 0)
$00001564             sub.w     $1586(pc),d0               0.00% (16, 192, 0, 0)
$00001568             add.w     d0,d0                      0.00% (16, 64, 0, 0)
$0000156a             sub.w     #$f8,d0                    0.00% (16, 128, 0, 0)
$0000156e             bra.w     $1588                      0.00% (16, 192, 0, 0)
[...]
getouttahere:
$00001588             move.w    #$2300,sr                  0.00% (16, 256, 0, 0)
$0000158c             move.b    #$2,$820a.w                0.00% (16, 256, 0, 0)
$00001592             move.w    #$777,$8240.w              0.00% (16, 256, 0, 0)
$00001598             lea.l     $15ef(pc),a0               0.00% (16, 128, 0, 0)
$0000159c             moveq     #$4,d7                     0.00% (16, 64, 0, 0)
$0000159e             divu.w    #$a,d0                     0.01% (80, 11200, 0, 0)
$000015a2             swap      d0                         0.01% (80, 320, 0, 0)
$000015a4             add.w     #$30,d0                    0.01% (80, 640, 0, 0)
$000015a8             move.b    d0,-(a0)                   0.01% (80, 640, 0, 0)
$000015aa             clr.w     d0                         0.01% (80, 320, 0, 0)
$000015ac             swap      d0                         0.01% (80, 320, 0, 0)
$000015ae             dbra      d7,$159e                   0.01% (80, 1024, 0, 0)
$000015b2             move.l    $15fe.l,$10.l              0.00% (16, 576, 0, 0)
$000015bc             move.l    $15fa.l,-(a7)              0.00% (16, 448, 0, 0)
$000015c2             move.w    #$20,-(a7)                 0.00% (16, 192, 0, 0)
$000015c6             trap      #$1                        0.00% (16, 576, 0, 0)
$000015c8             addq.l    #$6,a7                     0.00% (16, 128, 0, 0)
$000015ca             movem.l   (a7)+,d3-d7/a3-a6          0.00% (16, 1344, 0, 0)
$000015ce             rts                                  0.00% (16, 256, 0, 0)
vblhandler:
$000015d0             move.w    #$1,$1606.l                0.00% (16, 320, 0, 0)
$000015d8             rte                                  0.00% (16, 320, 0, 0)
[...]
$00fa002a             dc.w      $0008                      0.02% (130, 520, 0, 0)
$00fa002c             bvs.b     $fa0038                    0.02% (130, 1040, 0, 0)
$00fa002e             bne.b     $fa0032                    0.02% (130, 1040, 0, 0)
$00fa0030             rte                                  0.02% (130, 2600, 0, 0)
# <callee>: <caller1> = <calls> <types>[ <inclusive/totals>[ <exclusive/totals>]], <caller2> ..., <callee name>
# types: u = unknown PC change, n = PC moved to next instruction, b = branch/jump, s = subroutine call, r = return from subroutine, e = exception, x = return from exception
# totals: calls/instructions/cycles/i-misses/d-hits
0x111c: 0x1146 = 15 b, 0x1116 = 1 n, main_loop
0x115a: 0x111e = 16 s 16/879/9932 16/879/9932, 0x112a = 16 s 16/528/6656 16/528/6656, 0x113e = 16 s 16/1056/11584 16/1056/11584, print
0x116c: 0x1170 = 437 b, 0x1168 = 48 n, strlenloop
0x1188: 0x1184 = 48 n, 0x125e = 1 b, 0x1272 = 1 b, out
0x1192: 0x14ee = 1 s 1/2/20 1/2/20, test_nop
0x11a0: 0x14ee = 1 s 1/3/24 1/3/24, test_2nop
0x11ae: 0x14ee = 1 s 1/3/28 1/3/28, test_lsl1
0x11bc: 0x14ee = 1 s 1/3/40 1/3/40, test_lsl2
0x11d0: 0x14ee = 1 s 1/5/44 1/5/44, test_exg_dbra1
0x11ea: 0x14ee = 1 s 1/5/48 1/5/48, test_exg_dbra2
0x1204: 0x14ee = 1 s 1/4/36 1/4/36, test_exg_move1
0x121a: 0x14ee = 1 s 1/4/40 1/4/40, test_exg_move2
0x122e: 0x14ee = 1 s 1/5/44 1/5/44, test_asr_add1
0x1244: 0x14ee = 1 s 1/5/48 1/5/48, test_asr_add2
0x125a: 0x14ee = 1 s 1/4/36 1/4/36, test_cmp_beq1
0x126e: 0x14ee = 1 s 1/4/40 1/4/40, test_cmp_beq2
0x1284: 0x14ee = 1 s 1/4/48 1/4/48, test_sub_move1
0x129c: 0x14ee = 1 s 1/4/52 1/4/52, test_sub_move2
0x12b2: 0x14ee = 1 s 1/2/28 1/2/28, test_move_820a
0x12c4: 0x14ee = 1 s 1/2/32 1/2/32, test_move_8800
0x1352: 0x13c4 = 16 s 16/32/448 16/32/448, testinit
0x135a: 0x1132 = 16 s 64/548849/2536328 16/548726/2534632, run_test
0x138e: 0x1388 = 16 n, loop
0x14f0: 0x14ee = 16 n, continue
0x1588: 0x156e = 16 b, getouttahere
0x15d0: 0x13aa = 16 e 16/32/640 16/32/640, vblhandler
